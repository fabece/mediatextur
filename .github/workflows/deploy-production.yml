name: Deploy to Production

on:
  push:
    branches: [ main ]

env:
  PROJECT_NAME: semora
  CONTAINER_NAME: semora-backend-production
  PORT: 3100
  NODE_ENV: production

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: üõéÔ∏è Checkout Code
        uses: actions/checkout@v4

      - name: üê≥ Build Docker Image
        run: docker build -t ${{ env.CONTAINER_NAME }}:latest .

      - name: üíæ Save Docker Image
        run: docker save ${{ env.CONTAINER_NAME }}:latest | gzip > ${{ env.CONTAINER_NAME }}.tar.gz

      - name: üì§ Upload Docker Image to Server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          source: ${{ env.CONTAINER_NAME }}.tar.gz
          target: /home/deploy/
          overwrite: true

      - name: üì§ Upload ENV to Server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          source: .env.production
          target: /home/deploy/
          overwrite: true

      - name: üöÄ Deploy Container on Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            docker stop ${{ env.CONTAINER_NAME }} || true
            docker rm ${{ env.CONTAINER_NAME }} || true

            docker load -i /home/deploy/${{ env.CONTAINER_NAME }}.tar.gz
            docker run -d \
              --name ${{ env.CONTAINER_NAME }} \
              --restart unless-stopped -p ${{ env.PORT }}:${{ env.PORT }} \
              --env-file /home/deploy/.env.production \
              -e PORT=${{ env.PORT }} \
              -e NODE_ENV=${{ env.NODE_ENV }} \
              ${{ env.CONTAINER_NAME }}:latest

            docker image prune -f
            rm -f /home/deploy/${{ env.CONTAINER_NAME }}.tar.gz
            rm -f /home/deploy/.env.production

            echo "‚úÖ Backend deployed successfully"

  deploy-summary:
    runs-on: ubuntu-latest
    needs: [deploy]

    steps:
      - name: üìã Deployment Summary
        run: |
          echo "=== Deployment Summary for Production ==="
          echo "Backend changes: ${{ needs.deploy.result }}"

          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "‚úÖ Backend deployed successfully"
          else
            echo "‚ùå Backend deployment failed"
          fi

          echo "üåê Production URL: https://${{ env.PROJECT_NAME }}.com"
